const fs = require('fs');
const path = require('path');

// ุงููุณุงุฑุงุช
const migrationsDir = path.join(__dirname, 'supabase/migrations');
const archiveDir = path.join(migrationsDir, '_archived');

// ุฅูุดุงุก ูุฌูุฏ ุงูุฃุฑุดูู ุฅุฐุง ูู ููู ููุฌูุฏูุง
if (!fs.existsSync(archiveDir)) {
  fs.mkdirSync(archiveDir, { recursive: true });
  console.log('โ ุชู ุฅูุดุงุก ูุฌูุฏ ุงูุฃุฑุดูู: _archived');
}

// ูุฑุงุกุฉ ุฌููุน ูููุงุช ุงููุฌุฑุฉ
const allMigrationFiles = fs.readdirSync(migrationsDir)
  .filter(file => file.endsWith('.sql') && !file.startsWith('_'))
  .sort((a, b) => b.localeCompare(a)); // ุชุฑุชูุจ ุชูุงุฒูู ุจูุงุกู ุนูู ุงูุงุณู

// ุงูุงุญุชูุงุธ ุจุขุฎุฑ 5 ูููุงุช ููุท
const filesToKeep = allMigrationFiles.slice(0, 5);
const filesToArchive = allMigrationFiles.slice(5);

console.log(`๐น ุฅุฌูุงูู ูููุงุช ุงููุฌุฑุฉ: ${allMigrationFiles.length}`);
console.log(`๐น ุงููููุงุช ุงูุชู ุณูุชู ุงูุงุญุชูุงุธ ุจูุง: ${filesToKeep.length}`);
console.log(`๐น ุงููููุงุช ุงูุชู ุณูุชู ุฃุฑุดูุชูุง: ${filesToArchive.length}`);

// ููู ุงููููุงุช ุฅูู ุงูุฃุฑุดูู
let archivedCount = 0;
for (const file of filesToArchive) {
  const sourcePath = path.join(migrationsDir, file);
  const destPath = path.join(archiveDir, file);
  
  // ุชุฌุงูู ุงููุฌูุฏุงุช (ูุซู ูุฌูุฏ _archived ููุณู)
  if (fs.statSync(sourcePath).isDirectory()) {
    continue;
  }
  
  try {
    fs.renameSync(sourcePath, destPath);
    archivedCount++;
    console.log(`๐ฆ ุชูุช ุฃุฑุดูุฉ: ${file}`);
  } catch (err) {
    console.error(`โ ุฎุทุฃ ูู ุฃุฑุดูุฉ ${file}: ${err.message}`);
  }
}

console.log(`\nโ ุชูุช ุงูุนูููุฉ ุจูุฌุงุญ!`);
console.log(`๐ ุชู ุฃุฑุดูุฉ ${archivedCount} ููู`);
console.log(`๐ ุงููููุงุช ุงููุชุจููุฉ ูู ุงููุฌูุฏ ุงูุฑุฆูุณู: ${filesToKeep.length}`);
console.log(`๐ ููููู ุงูุนุซูุฑ ุนูู ุงููููุงุช ุงููุคุฑุดูุฉ ูู: supabase/migrations/_archived`);